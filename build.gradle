/*
    adding the plugin jars to the classpath to apply them later.
    currently the new plugins DSL does apply them directly.
    there are other limitations too. See https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block
    we don't need to apply the jruby and bintray plugin on the rootProject.
*/
buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.10"
        classpath "gradle.plugin.io.sdkman:gradle-sdkvendor-plugin:1.1.0"
        classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:4.3.0"
    }
}

// modern plugins config
plugins {
  id 'com.github.jruby-gradle.base' version '2.0.0'
}

// TIP use -PpublishRelease=true to active release behavior regardless of the version
status = project.hasProperty('publishRelease') && project.publishRelease.toBoolean() ?
    'release' : ((version == 'unspecified' || version.endsWith('-SNAPSHOT')) ? 'snapshot' : 'release')

// using ExpandoMetaClass to add isDistribution() Method to Project instances...
Project.metaClass.isDistribution = { delegate.getName().endsWith("-distribution") }

ext {
  buildDateTime = new Date()
  (buildDateOnly, buildTimeOnly) = new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss.SSSZ').format(buildDateTime).split(' ')
  statusIsRelease = (status == 'release')

  // jar versions
  arquillianVersion = '1.1.10.Final'
  arquillianSpockVersion = '1.0.0.Beta3'
  asciidoctorjPdfVersion = '1.5.0'
  asciidoctorjEpub3Version = '1.5.0-alpha.13'
  asciidoctorjDiagramVersion = '2.0.1'
  commonsioVersion = '2.4'
  guavaVersion = '18.0'
  hamcrestVersion = '1.3'
  jcommanderVersion = '1.72'
  jrubyVersion = '9.2.9.0'
  jsoupVersion = '1.10.2'
  junitVersion = '4.12'
  nettyVersion = '4.0.33.Final'
  saxonVersion = '9.9.0-2'
  xmlMatchersVersion = '1.0-RC1'
  pdfboxVersion = '1.8.10'

  // gem versions
  asciidoctorGemVersion = project.hasProperty('asciidoctorGemVersion') ? project.asciidoctorGemVersion : '2.0.10'
  coderayGemVersion = '1.1.2'
  rougeGemVersion = '3.12.0'

  codenarcVersion = '0.24.1'
  groovyVersion = '2.4.13'
  erubisGemVersion = '2.7.0'
  hamlGemVersion = '5.0.4'
  openUriCachedGemVersion = '0.0.5'
  slimGemVersion = '4.0.1'
  concurrentRubyGemVersion = '1.0.5'
  spockVersion = '0.7-groovy-2.0'
  threadSafeGemVersion = '0.3.6'
  tiltGemVersion = '2.0.9'
  osgiVersion = '7.0.0'
}

allprojects {
  group = 'org.asciidoctor'
  defaultTasks 'check'
}

subprojects {
  // NOTE applying Java plugin changes the status; take steps to preserve value
  def _status = status
  apply plugin: 'java'
  apply plugin: 'groovy'

  if (!it.name.endsWith('-documentation') && !it.name.endsWith('-wildfly-integration-test')) {

    apply from: rootProject.file('gradle/signing.gradle')
    if (!it.isDistribution()){
      apply from: rootProject.file('gradle/publish.gradle')
    }
    if (statusIsRelease) {
      apply from: rootProject.file('gradle/deploy.gradle')
    } else if (it.version.endsWith('SNAPSHOT')) {
      apply from: rootProject.file('gradle/deploySnapshot.gradle')
    }
  }

  status = _status

  // NOTE sourceCompatibility & targetCompatibility are set in gradle.properties to meet requirements of Gradle
  // Must redefine here to work around a bug in the Eclipse plugin
  sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

  plugins.withType(JavaPlugin) {
    project.tasks.withType(JavaCompile) { task ->
      task.sourceCompatibility = project.sourceCompatibility
      task.targetCompatibility = project.targetCompatibility
      if (project.hasProperty("showDeprecation")) {
        options.compilerArgs << "-Xlint:deprecation"
      }
      if (project.hasProperty("showUnchecked")) {
        options.compilerArgs << "-Xlint:unchecked"
      }
    }
    project.tasks.withType(GroovyCompile) { task ->
      task.sourceCompatibility = project.sourceCompatibility
      task.targetCompatibility = project.targetCompatibility
    }
  }

  repositories {
    if (project.hasProperty('useMavenLocal') && project.useMavenLocal.toBoolean()) {
      mavenLocal()
    }

    jcenter()
  }

  apply plugin: 'codenarc'
  codenarc {
    configFile = rootProject.file('config/codenarc/codenarc.groovy')
  }

  if (it.name != 'asciidoctorj-wildfly-integration-test') {

    dependencies {
      testCompile "junit:junit:$junitVersion"
      testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
      testCompile("org.spockframework:spock-core:$spockVersion") {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
      }
      testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
      testCompile "org.jboss.arquillian.junit:arquillian-junit-container:$arquillianVersion"
      testCompile "org.jboss.arquillian.spock:arquillian-spock-container:$arquillianSpockVersion"

      codenarc "org.codehaus.groovy:groovy:$groovyVersion"
      codenarc "org.codehaus.groovy:groovy-xml:$groovyVersion"
      codenarc "org.codehaus.groovy:groovy-ant:$groovyVersion"
      codenarc("org.codenarc:CodeNarc:$codenarcVersion") {
        exclude group: 'org.codehaus.groovy'
      }
    }
  }


  test {
    forkEvery = 10
    minHeapSize = '128m'
    maxHeapSize = '1024m'
    if (JavaVersion.current().isJava8Compatible()) {
      jvmArgs '-XX:-UseGCOverheadLimit'
    }

    testLogging {
      // events 'passed', 'failed', 'skipped', 'standard_out', 'standard_error'
      // events 'standard_out', 'standard_error'
      afterSuite { desc, result ->
        if (!desc.parent && logger.infoEnabled) {
          logger.info "Test results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
        }
      }
    }
  }

}

configure(subprojects.findAll { !it.isDistribution() && it.name != 'asciidoctorj-api' && it.name != 'asciidoctorj-documentation' && it.name != 'asciidoctorj-test-support' && it.name != 'asciidoctorj-arquillian-extension' && it.name != 'asciidoctorj-wildfly-integration-test' }) {
  apply from: rootProject.file('gradle/versioncheck.gradle')
}

// apply JRuby and sources/javadocs packaging stuff for all subprojects except the distribution
configure(subprojects.findAll { !it.isDistribution() }) {

  apply plugin: 'com.github.jruby-gradle.base'
  apply from: rootProject.file('gradle/eclipse.gradle')
  apply plugin: 'idea'

  jruby {
    defaultRepositories false
  }

  repositories {
    ruby.gems()
  }

  if (JavaVersion.current().isJava8Compatible()) {
    javadoc {
      // Oracle JDK8 likes to fail the build over spoiled HTML
      options.addStringOption('Xdoclint:none', '-quiet')
      options.source('8')
    }
  }
}

configure(subprojects.findAll { !it.name.endsWith('-distribution') && ! it.name.endsWith('-documentation')}) {

  task sourcesJar(type: Jar, dependsOn: classes, group: 'Release') {
    description 'Assembles a jar archive containing the main source code.'
    from sourceSets.main.allSource
    classifier 'sources'
  }

  task javadocJar(type: Jar, dependsOn: javadoc, group: 'Release') {
    description 'Assembles a jar archive containing the Javadoc API documentation for the main source code.'
    from javadoc.destinationDir
    classifier 'javadoc'
  }

  // jcenter & Maven Central requires sources & javadoc jars (even if empty), so give 'em what they want
  artifacts {
    archives sourcesJar, javadocJar
  }

  jruby {
    defaultRepositories = false
    defaultVersion = jrubyVersion
    // TODO I'd like to be able to customize the name of the gemInstallDir
  }

  ext {
    // path to use for the prepared jruby gems
    preparedGems = new File("$buildDir/preparedGems")
  }

  sourceSets {
    main {
      //let's register an output folder on the main SourceSet:
      output.dir(preparedGems, builtBy: 'jrubyPrepare')
      //it is now a part of the 'main' classpath and will be a part of the jar
    }
  }

  // QUESTION is this the right place to insert this task dependency in the lifecycle?
  // IMPORTANT The TMP or TEMP environment variable must be set for the gem install command to work on Windows
  processResources.dependsOn jrubyPrepare
}
